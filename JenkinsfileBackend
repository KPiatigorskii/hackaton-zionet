
pipeline {
    agent any
    stages {
        stage('checkout') {
            steps {
                script {
                    echo "$params.BRANCH"
                    git credentialsId: 'github-creds',
                    url: 'https://github.com/KPiatigorskii/hackaton-zionet.git',
                    branch: "$params.BRANCH"
                }
            }
        }

        stage('Copy Config File') {
            steps {
                script {
                    configFileProvider([configFile(fileId: 'b2dbb3dd-ceb8-4bbb-a8bc-d1a1d90f76fd', targetLocation: 'CompetitionBack/')]) {
                        sh 'ls -al CompetitionBack/'
                    }
                }
            }
        }

        stage('Run tests') {
            steps {
                script {
                    echo "Testing solution..."
                    def testExitCode = sh(script: 'cd MssqlAccessorTests && dotnet test', returnStatus: true)

                    if (testExitCode != 0) {
                        error "Tests failed! Exiting pipeline."
                    } else {
                        echo "All tests passed!"
                    }
                }
            }
        }

        stage('Push Docker images to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', 
                                    usernameVariable: 'DOCKERHUB_USERNAME', 
                                    passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        echo "Pushing Docker images to Docker Hub"
                        sh "docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD"
                        
                        def currentBranch = params.BRANCH
                        echo "currentBranch: $params.BRANCH"
                        def trimmedBranchName = currentBranch.replaceAll('^mssqlaccessor_', '')

                        sh "docker build -t kpiatigorskii/mssqlaccessor:$trimmedBranchName . -f CompetitionBack/Dockerfile"
                        echo "Pushing mssqlaccessor to Docker Hub"
                        sh "docker push kpiatigorskii/mssqlaccessor:$trimmedBranchName"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Clearing Jenkins pipeline folder"
            sh 'rm -rf *'
        }

        success {
            echo "Pipeline succeeded! Notifying on Slack."
            script{
                def buildUrl = env.BUILD_URL
                slackSend(
                    color: "#00FF00",
                    channel: "jenkins-notify",
                    message: "<${buildUrl}|${currentBuild.fullDisplayName}> was succeeded",
                    tokenCredentialId: 'slack-token'
                )
            }

        }

        failure {
            echo "Pipeline failed! Notifying on Slack."
            script{
                def buildUrl = env.BUILD_URL
                slackSend(
                    color: "#FF0000",
                    channel: "jenkins-notify",
                    message: "<${buildUrl}|${currentBuild.fullDisplayName}> was failed",
                    tokenCredentialId: 'slack-token'
                )
            }
        }
    }
}
