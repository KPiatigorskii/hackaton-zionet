@page "/profile"
@using CoreTweet;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.OAuth
@using Microsoft.AspNetCore.Components.Forms
@using ZionetCompetition.Services
@using System.Security.Claims
@using ZionetCompetition.Models
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore

@inject IConfiguration Configuration


@if (twitterIsConnected)
{
    <div> Twitter Account: @twitterUserName</div>
}
else
{
    <Button Color="Color.Primary" Clicked=@BeginLogin hidden="@(!twitFormHidden)">Connect Twitter</Button>

    <EditForm Model="@pinCodeModel" OnSubmit="@ConfirmPinCode" hidden="@twitFormHidden">
        <InputText id="PINCode" @bind-Value="pinCodeModel.PINCode" />

        <Button Color="Color.Primary" Type="ButtonType.Submit" >Confirm PINcode</Button>
    </EditForm>
}


@code{
    public string redirectUrl;
    private string strValue;
    private bool twitFormHidden = true;
    private CoreTweet.OAuth.OAuthSession twitterSession;
    private CoreTweet.Tokens tokens;
    public PinCodeModel pinCodeModel = new();
    private bool twitterIsConnected = false;
    private string twitterUserName;
    private string accessToken;
    private string accessTokenSecret;

    protected override async Task OnInitializedAsync()
    {
        twitterUserName = await localStorage.GetItemAsync<string>("TwitterUserName");
        accessToken = await localStorage.GetItemAsync<string>("TwitterRequestToken");
        accessTokenSecret = await localStorage.GetItemAsync<string>("TwitterRequestTokenSecret");
        if (!string.IsNullOrEmpty(twitterUserName) && !string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(accessTokenSecret))
        {
            twitterIsConnected = true;
            tokens = Tokens.Create(Configuration.GetSection("Twitter:TWITTER_API_KEY").Value,
                    Configuration.GetSection("Twitter:TWITTER_API_SECRET").Value, accessToken, accessTokenSecret);
        }
    }

    private async Task BeginLogin()
    {
        twitterSession = OAuth.Authorize(Configuration.GetSection("Twitter:TWITTER_API_KEY").Value,
                                        Configuration.GetSection("Twitter:TWITTER_API_SECRET").Value);
        redirectUrl = twitterSession.AuthorizeUri.AbsoluteUri;
        twitFormHidden = false;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("open", redirectUrl, "_blank");
    }

    private async Task ConfirmPinCode()
    {
        tokens = OAuth.GetTokens(twitterSession, pinCodeModel.PINCode);

        await localStorage.SetItemAsync("TwitterUserName", tokens.ScreenName);//  put this id to db
        await localStorage.SetItemAsync("TwitterRequestToken", tokens.AccessToken);
        await localStorage.SetItemAsync("TwitterRequestTokenSecret", tokens.AccessTokenSecret);
        twitterUserName = tokens.ScreenName;
        twitterIsConnected = true;
        StateHasChanged();
    }
}