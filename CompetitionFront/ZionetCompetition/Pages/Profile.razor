@page "/profile"
@inject AuthenticationStateProvider AuthState
@using ZionetCompetition.Models
@attribute [Authorize]
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Call web API from a Blazor Server Razor component</h1>

@if (getBranchesError)
{
    <p>Unable to get branches from GitHub. Please try again later.</p>
}
else
{
    <ul>
        @foreach (var user in users)
        {
            <li>@user.FirstName @user.LastName @user.Github @user.Email @user.Login</li>
        }
    </ul>
}

@code {
    private IEnumerable<User> users = Array.Empty<User>();
    private bool getBranchesError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:7277/api/User");

        var client = ClientFactory.CreateClient();
        JsonSerializerOptions jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();

            users = await JsonSerializer.DeserializeAsync
                <IEnumerable<User>>(responseStream, jsonOptions);
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
    }
}