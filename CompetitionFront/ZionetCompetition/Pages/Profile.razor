@page "/profile"
@using CoreTweet;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.OAuth
@using Microsoft.AspNetCore.Components.Forms
@using ZionetCompetition.Services
@using System.Security.Claims
@using ZionetCompetition.Models

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IConfiguration Configuration
@inject ZionetCompetition.Services.TwitterService TwitterService
@inject ZionetCompetition.Services.TwitterEngineService TwitterEngineService
@inject ZionetCompetition.Services.TokenService TokenService
@inject ZionetCompetition.Controllers.GenClientController<ZionetCompetition.Models.User> UserController


@if (twitterIsConnected)
{
    <div> Twitter Account: @twitterUserName</div>
}
else
{
    <Button Color="Color.Primary" Clicked=@BeginLogin hidden="@(!twitFormHidden)">Connect Twitter</Button>

    <EditForm Model="@pinCodeModel" OnSubmit="@ConfirmPinCode" hidden="@twitFormHidden">
        <InputText id="PINCode" @bind-Value="pinCodeModel.PINCode" />

        <Button Color="Color.Primary" Type="ButtonType.Submit" >Confirm PINcode</Button>
    </EditForm>
}


@code{
    public string redirectUrl;
    private string strValue;
    private bool twitFormHidden = true;
    private CoreTweet.OAuth.OAuthSession twitterSession;
    private CoreTweet.Tokens tokens;
    public PinCodeModel pinCodeModel = new();
    private bool twitterIsConnected = false;
    private string twitterUserName;
    private string accessToken;
    private string accessTokenSecret;

    private ZionetCompetition.Models.User message = new ZionetCompetition.Models.User { };
    private string? userInput;
    private int? userId;

    protected override async Task OnInitializedAsync()
    {
        await UserController.ConfigureHub(TokenService.GetToken(HttpContextAccessor));
        await UserController.StartConnection();
        await UserController.Get(2);  // TODO receive REAL id of user

        message = UserController.message;
        //StateHasChanged();

        twitterUserName = await localStorage.GetItemAsync<string>("TwitterUserName");
        accessToken = await localStorage.GetItemAsync<string>("TwitterRequestToken");
        accessTokenSecret = await localStorage.GetItemAsync<string>("TwitterRequestTokenSecret");
        if (!string.IsNullOrEmpty(twitterUserName) && !string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(accessTokenSecret))
        {
            twitterIsConnected = true;
            tokens = TwitterService.getTokens(accessToken, accessTokenSecret);
        }
    }

    private async Task BeginLogin()
    {
        twitterSession = TwitterService.getTwitterSession();
        redirectUrl = twitterSession.AuthorizeUri.AbsoluteUri;
        twitFormHidden = false;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("open", redirectUrl, "_blank");
    }

    private async Task ConfirmPinCode()
    {
        tokens = TwitterService.getTokensByPIN(twitterSession, pinCodeModel.PINCode);
        await TwitterService.setTokensToStorage(tokens);
        twitterUserName = tokens.ScreenName;
        twitterIsConnected = true;
        StateHasChanged(); //tokens.UserId
        await TwitterEngineService.runTweetSearchAsync(1, "teamName", 2, "eventName");

    }
}