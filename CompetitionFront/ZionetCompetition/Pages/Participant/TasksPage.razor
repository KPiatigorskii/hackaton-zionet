@page "/mytasks"
@using System;
@using System.Globalization;
@using System.Reflection;
@using Microsoft.AspNetCore.SignalR.Client
@using ZionetCompetition.Models
@using Blazorise.DataGrid

@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject ZionetCompetition.Controllers.GenClientController<TaskModel> TaskController
@inject ZionetCompetition.Controllers.GenClientController<EventTask> EventTaskController
@inject ZionetCompetition.Controllers.AuthClientController<User> AuthController
@inject ZionetCompetition.Controllers.GenClientController<EventManager> EventManagerController
@inject ZionetCompetition.Controllers.GenClientController<EventTaskEvaluateUser> EventTaskEvaluateUserController
@inject ZionetCompetition.Controllers.GenClientController<EventParticipantTeam> EventParticipantTeamController
@inject NavigationManager Navigation
@inject ZionetCompetition.Services.TokenService TokenService


@implements IAsyncDisposable

@if (!loaded)
{
	<SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
	<DataGrid TItem="EventTask"
		  Data="@eventTasks"
		  @bind-SelectedRow=selectedTask
		  Filterable="true"
		  FilterMethod="DataGridFilterMethod.Contains"
		  Striped="true"
		  Editable="false"
		  Hoverable="true"
		  Responsive="true"
		  ShowPager="true"
		  ShowPageSizes="true"
		  SelectionMode="DataGridSelectionMode.Single" >
		<ChildContent>
			<DataGridColumn TItem="EventTask" Field="Task.Id" Caption="Id" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Title" Caption="Title" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Category.Title" Caption="Category" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Language" Caption="Language" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Platform" Caption="Platform" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Duration" Caption="Duration" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Points" Caption="Points" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.HasBonus" Caption="HasBonus" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.BonusExtraTime" Caption="BonusExtraTime" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.BonusPoints" Caption="BonusPoints" Sortable="false" Displayable="true" Editable />
		</ChildContent>

		<EmptyTemplate>
			<div class="box">
				No records were found.
			</div>
		</EmptyTemplate>

		<LoadingTemplate>
			<div class="box">
				<progress class="progress is-small is-primary" max="100" />
			</div>
		</LoadingTemplate>
	</DataGrid>
}

@code {
	private Modal modalRef;
	private EventTask selectedTask;
	private TaskModel selectedTaskInPool;
	private List<TaskModel> allTasks = new List<TaskModel> { };
	private List<EventTask> allEventTasks = new List<EventTask> { };
	private List<EventTask> eventTasks = new List<EventTask> { };
	private List<EventManager> allEventManagers = new List<EventManager> { };
	private List<EventManager> eventManagers = new List<EventManager> { };
	private List<EventTaskEvaluateUser> allEventTaskEvaluateUsers = new List<EventTaskEvaluateUser> { };
	private List<EventTaskEvaluateUser> eventTaskEvaluateUsers = new List<EventTaskEvaluateUser> { };
	private int currentEventId;
	private bool loaded = false;

	protected override async Task OnInitializedAsync()
	{

		var token = await TokenService.GetToken();
		// get Id by email
		var email = HttpContextAccessor.HttpContext.User.Claims.FirstOrDefault(e => e.Type == "http://zionet-api/user/claims/email").Value;
		AuthController.ConfigureHub(token);
		await AuthController.StartConnection();
		await AuthController.Get(email);
		var userId = AuthController.message.Id;

		// get currentEventId
		Dictionary<string, object> currentEventIdFilter = new Dictionary<string, object>() { { "participantId", userId }, { "is_active", true } };
		await EventParticipantTeamController.ConfigureHub(token);
		await EventParticipantTeamController.StartConnection();
		await EventParticipantTeamController.GetOneWithConditions(currentEventIdFilter);
		currentEventId = EventParticipantTeamController.message.EventId;

		//get all task from this event
		Dictionary<string, object> currentTasksFromEventFilter = new Dictionary<string, object>() { { "eventId", currentEventId }};
		await EventTaskController.ConfigureHub(token);
		await EventTaskController.StartConnection();
		await EventTaskController.GetOneWithConditions(currentTasksFromEventFilter);
		allEventTasks = EventTaskController.messages.ToList();

		loaded = true;
		StateHasChanged();
	}

	public void ApplyTask()
	{
		//	
	}

	public async ValueTask DisposeAsync()
	{
		await TaskController.DisposeAsync();
		await EventTaskController.DisposeAsync();
		await EventManagerController.DisposeAsync();
		await EventTaskEvaluateUserController.DisposeAsync();
	}

}	