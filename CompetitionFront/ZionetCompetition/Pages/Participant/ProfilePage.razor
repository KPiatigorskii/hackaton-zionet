@page "/myProfile"
@using System
@using CoreTweet
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.OAuth
@using Microsoft.AspNetCore.Components.Forms
@using ZionetCompetition.Services
@using System.Security.Claims
@using ZionetCompetition.Models

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IConfiguration Configuration
@inject ZionetCompetition.Services.TwitterService TwitterService
@inject ZionetCompetition.Services.TwitterEngineService TwitterEngineService
@inject ZionetCompetition.Services.TokenService TokenService
@inject ZionetCompetition.Controllers.GenClientController<ZionetCompetition.Models.User> UserController

@inject ZionetCompetition.Controllers.AuthClientController<ZionetCompetition.Models.User> AuthController

@if (!loaded)
{
  <SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
    
<Validations @ref="@ValidationsRef" Mode="ValidationMode.Manual" Model="@UserOnForm" ValidateOnLoad="false">
    <Row>
        <Validation>
            <Field ColumnSize="ColumnSize.IsHalf">
                <FieldLabel>Email</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@currentUser.Email" Disabled="@DisableMode">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
    </Row>
     <Row>
        <Validation>
            <Field ColumnSize="ColumnSize.IsHalf">
                <FieldLabel>Login</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@currentUser.Login" Disabled="@DisableMode">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
    </Row>
    <Row>
        <Validation>
            <Field ColumnSize="ColumnSize.IsHalf">
                <FieldLabel>First Name</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@currentUser.FirstName" Disabled="@DisableMode">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
    </Row>
    <Row>
        <Validation>
            <Field ColumnSize="ColumnSize.IsHalf">
                <FieldLabel>Last Name</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@currentUser.LastName" Disabled="@DisableMode">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
    </Row>
    <Row>
        <Validation>
            <Field ColumnSize="ColumnSize.IsHalf">
                <FieldLabel>Github</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@currentUser.Github" Disabled="@DisableMode">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
    </Row>

    @if (twitterIsConnected)
    {
        <Row>
            <Validation>
                <Field ColumnSize="ColumnSize.IsHalf">
                    <FieldLabel>Twitter Account</FieldLabel>
                    <FieldBody>
                        <TextEdit @bind-Text="@twitterUserName" Disabled="true" ReadOnly>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>
        </Row>
    }
    else
    {
        <Button Color="Color.Primary" Clicked=@BeginLogin hidden="@(!twitFormHidden)">Connect Twitter</Button>

        <EditForm Model="@pinCodeModel" OnSubmit="@ConfirmPinCode" hidden="@twitFormHidden">
            <InputText id="PINCode" @bind-Value="pinCodeModel.PINCode" />

            <Button Color="Color.Primary" Type="ButtonType.Submit">Confirm PINcode</Button>
        </EditForm>
    }
    <Row Height="Height.Is100">
        &nbsp;
    </Row>
    @if (!DisableMode)
    {
        <Row>
            <Field ColumnSize="ColumnSize.IsQuarter">
                <Button Color="Color.Primary" Clicked="@OnSaveClicked">
                    Validate and Submit
                </Button>
                <Button Color="Color.Danger" Clicked="@OnCancelClicked">
                    Cancel
                </Button>
            </Field>
        </Row>
    }
    else
    {
        <Row>
            <Field ColumnSize="ColumnSize.IsQuarter">
                <Button Color="Color.Primary" Clicked=@setEditMode>
                    Edit
                </Button>
            </Field>
        </Row>
    }
</Validations>
}

@code {
    public string redirectUrl;
    private string strValue;
    private bool twitFormHidden = true;
    private CoreTweet.OAuth.OAuthSession twitterSession;
    private CoreTweet.Tokens tokens;
    public PinCodeModel pinCodeModel = new();
    private bool twitterIsConnected = false;
    private string twitterUserName;
    private string accessToken;
    private string accessTokenSecret;


    private string? userInput;
    private string currentTeamName;
    private string currentEventName;
    private int? userId;
    private string token;
    private string email;
    private bool loaded = false;
    private ZionetCompetition.Models.User UserOnForm = new ZionetCompetition.Models.User { };
    private ZionetCompetition.Models.User currentUser = new ZionetCompetition.Models.User() { };

    Validations ValidationsRef { get; set; }
    private bool DisableMode = true;

    protected override async Task OnInitializedAsync()
    {
        var claims = HttpContextAccessor.HttpContext.User.Claims;
        if (claims.FirstOrDefault(e => e.Type == "currentTeamName") != null)
            currentTeamName = claims.FirstOrDefault(e => e.Type == "currentTeamName").Value;
        else
        {
            currentTeamName = "undefined";
        }

        if (claims.FirstOrDefault(e => e.Type == "currentEventName") != null)
        {
            currentEventName = claims.FirstOrDefault(e => e.Type == "currentEventName").Value;            
        }
        else
        {
            currentEventName = "";
        }
    
        token = await TokenService.GetToken();
        // get Id by email
        email = claims.FirstOrDefault(e => e.Type == "http://zionet-api/user/claims/email").Value;
        AuthController.ConfigureHub(token);
        await AuthController.StartConnection();
        await AuthController.Get(email);
        currentUser = AuthController.message;
        UserOnForm = AuthController.message;
        userId = AuthController.message.Id;
        //StateHasChanged();

        twitterUserName = await localStorage.GetItemAsync<string>("TwitterUserName");
        accessToken = await localStorage.GetItemAsync<string>("TwitterRequestToken");
        accessTokenSecret = await localStorage.GetItemAsync<string>("TwitterRequestTokenSecret");
        if (!string.IsNullOrEmpty(twitterUserName) && !string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(accessTokenSecret))
        {
            twitterIsConnected = true;
            tokens = TwitterService.getTokens(accessToken, accessTokenSecret);
        }
        loaded = true;
        StateHasChanged();
    }

    private async Task BeginLogin()
    {
        twitterSession = TwitterService.getTwitterSession();
        redirectUrl = twitterSession.AuthorizeUri.AbsoluteUri;
        twitFormHidden = false;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("open", redirectUrl, "_blank");
    }

    private async Task ConfirmPinCode()
    {
        tokens = TwitterService.getTokensByPIN(twitterSession, pinCodeModel.PINCode);
        await TwitterService.setTokensToStorage(tokens);
        twitterUserName = tokens.ScreenName;
        currentUser.TwitterUserId = tokens.UserId.ToString();
        twitterIsConnected = true;
        StateHasChanged();
        UserController.ConfigureHub(token);
        await UserController.StartConnection();
        await UserController.Update(currentUser.Id, currentUser);
        //await TwitterEngineService.runTweetSearchAsync(tokens.UserId, currentTeamName, currentUser.Id, currentEventName);

    }

    async Task OnCancelClicked()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    async Task OnSaveClicked()
    {
        if (await ValidationsRef.ValidateAll())
        {
            await ValidationsRef.ClearAll();
            UserController.ConfigureHub(token);
            await UserController.StartConnection();
            await UserController.Update(currentUser.Id, currentUser);
            StateHasChanged();
        }
    }

    private async void setEditMode()
    {
        DisableMode = false;
    }
}