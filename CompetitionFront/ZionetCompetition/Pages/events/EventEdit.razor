@page "/Events/{id:int}/edit"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorBootstrap
@using Blazorise
@using ZionetCompetition.Models

@if (!loaded)
{
    <H1 style="text-align:center">Loading...</H1>
}
else
{
    <EditForm Model="@message" OnValidSubmit="@Save" OnInvalidSubmit=@InvalidFormSubmitted>
        <DataAnnotationsValidator />
        <div>
            <label>
                Title
                <InputText @bind-Value="@message.Title" />
            </label>
        </div>
        <div>
            <label>
                StartTime
                <InputText @bind-Value="@message.StartTime" />
            </label>
        </div>
        <div>
            <label>
                NumberParticipantsInTeam
                <InputNumber @bind-Value="@message.NumberParticipantsInTeam" />
            </label>
        </div>
         <div>
            <label>
                Hashcode
                <InputText @bind-Value="@message.Hashcode" />
            </label>
        </div>
        <div>
            <label>
                CreateDate
                <InputDate @bind-Value="@message.CreateDate" />
            </label>
        </div>

        <Blazorise.Bootstrap.Button Color="Color.Primary" Type="Blazorise.ButtonType.Submit">Save</Blazorise.Bootstrap.Button>
    </EditForm>

}

@code {
    [Parameter]
    public int id { get; set; }


    private HubConnection? hubConnection;
    private Event EventFields;
    private Event message, Event;
    private string? EventInput;
    private int? EventId;
    private string? messageInput;
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7277/events")
            .Build();

        hubConnection.On<Event>("ReceiveEvent", (eventResponse) =>
            {
                message = eventResponse;
                InvokeAsync(StateHasChanged);
                loaded = true;
            });

        hubConnection.On<Event>("UpdateEvent", (eventResponse) =>
            {
                message = eventResponse;
                InvokeAsync(StateHasChanged);
            });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetOne", id);
        while (!loaded) { }


    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private async void Save(EditContext editContext)
    {
        await hubConnection.SendAsync("UpdateOne",id, message);
    }

    private void InvalidFormSubmitted(){}


}
