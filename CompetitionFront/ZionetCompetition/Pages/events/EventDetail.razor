@page "/events/{id:int}"
@inject NavigationManager UriHelper
@using Microsoft.AspNetCore.SignalR.Client
@using ZionetCompetition.Models
@using Blazorise

<h3>User Details</h3>
@if (!loaded)
{
    <H1 style="text-align:center">Loading...</H1>
}
else
{
    <div><span>FirstName:</span><span>  @message.Title</span></div>
    <div><span>LastName:</span><span>@message.Address</span></div>
    <div><span>Email:</span><span>@message.StartTime</span></div>
    <div><span>Github:</span><span>@message.Hashcode</span></div>
    <div><span>RoleId:</span><span>@message.CreateDate</span></div>


<div style="margin-top: 20px">

    <Button Color="Color.Primary" @onclick="Edit" disabled="@(!IsConnected)">Edit</Button>
    <Button Color="Color.Primary" @onclick="Delete" disabled="@(!IsConnected)">Delete</Button>
   


</div>
}


@code {
    [Parameter]
    public int id { get; set; }


    private HubConnection? hubConnection;
    private Event message;
    private string? userInput;
    private int? userId;
    private string? messageInput;
    private bool loaded = false;

    void Navigate()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7277/events")
            .Build();

        hubConnection.On<Event>("ReceiveEvent", (eventResponce) =>
            {
                message = eventResponce;
                InvokeAsync(StateHasChanged);
                loaded = true;
            });

        hubConnection.On<Event>("CreateEvent", (eventResponce) =>
            {
                message = eventResponce;
                InvokeAsync(StateHasChanged);
            });

        hubConnection.On<Event>("DeleteEvent", (eventResponce) =>
            {
                message = eventResponce;
                InvokeAsync(StateHasChanged);
            });

        hubConnection.On<Event>("UpdateEvent", (eventResponce) =>
            {
                message = eventResponce;
                InvokeAsync(StateHasChanged);
            });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetOne", id);
        while (!loaded) { }

    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private async Task Create()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Create");
        }
    }

    private void Edit()
    {
        UriHelper.NavigateTo("/events/" + id + "/Edit");
    }

    private async Task Delete()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ForceDeleteOne", id);
            UriHelper.NavigateTo("/events/");
        }
    }
}
