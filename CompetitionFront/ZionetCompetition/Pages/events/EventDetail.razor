@page "/events/{id:int}"

@using Microsoft.AspNetCore.SignalR.Client
@using System.Reflection;
@using ZionetCompetition.Models
@using ZionetCompetition.Data
@using Blazorise
@using Blazorise.DataGrid

@inject NavigationManager UriHelper
@inject ZionetCompetition.Controllers.EventController EventController

@implements IAsyncDisposable

<h3>Event Details</h3>

    <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
        <Items>
            <Tab Name="Teams">Teams</Tab>
            <Tab Name="Tasks">Tasks</Tab>
            <Tab Name="Managers">Managers</Tab>
            <Tab Name="Info">Info</Tab>
        </Items>
        <Content>
            <TabPanel Name="Teams">
                @foreach(var team in teams)
            {
                <Card>
                    @*<img src="@team.ImgPath">*@
                    <p>Title: @team.Title</p>
                    <p>Status Id:@team.StatusId</p>
                    <p>Members:</p>
                    @foreach(var teamMember in team.TeamParticipants)
                    {
                    <tbody>
                        @foreach (var property in typeof(TeamParticipant).GetProperties())
                        {
                            @if (property.IsDefined(typeof(CustomAttribute), false))
                            {
                                <tr>
                                        <td>@property.Name &nbsp;&nbsp;</td>
                                        <td>@teamMember.GetType().GetProperty(property.Name).GetValue(teamMember)</td>
                                </tr>
                            }

                        }
                    </tbody>
                    }
                </Card>

            }
            @*                <Button Color="Color.Primary" @onclick="CreateUser">Create User</Button>
                <Button Color="Color.Primary" @onclick="CreateTeam">Create Team</Button>*@
            </TabPanel>
            <TabPanel Name="Tasks">
                Content for profile.
            </TabPanel>
            <TabPanel Name="Managers">
                Content for messages.
            </TabPanel>
            <TabPanel Name="Info">

                <tbody>
                    @foreach (var property in typeof(EventModel).GetProperties())
                    {
                        @if (property.IsDefined(typeof(CustomAttribute), false))
                        {
                            <tr>
                                <td>@property.Name &nbsp;&nbsp;</td>
                                <td>@message.GetType().GetProperty(property.Name).GetValue(message)</td>
                            </tr>
                        }

                    }
                </tbody>
            </TabPanel>
        </Content>
    </Tabs>



<div style="margin-top: 20px">


   


</div>


@code {
    [Parameter]
    public int id { get; set; }
    string selectedTab = "profile";

    private List<Team> teams = new List<Team>
    {
        new Team(){
            Id = 1,
            Title = "Team 1",
            EventId = 1,
            CreateDate = new DateTime(2020, 1, 1),
            UpdateDate = new DateTime(2020, 1, 1),
            CreateUserId = 1,
            UpdateUserId = 1,
            StatusId = 1,
            TeamParticipants =
            {
                new TeamParticipant()
                {
                    Id = 1,
                    TeamId = 1,
                    ParticipantId = 1,
                    IsLeader = true
                },
                new TeamParticipant()
                {
                    Id = 2,
                    TeamId = 1,
                    ParticipantId = 2,
                    IsLeader = false
                },
                new TeamParticipant()
                {
                    Id = 3,
                    TeamId = 2,
                    ParticipantId = 3,
                    IsLeader = true
                }
            }
        },
        new Team(){
            Id = 2,
            Title = "Team 2",
            EventId = 1,
            CreateDate = new DateTime(2020, 1, 2),
            UpdateDate = new DateTime(2020, 1, 2),
            CreateUserId = 2,
            UpdateUserId = 2,
            StatusId = 1
        },
        new Team(){
            Id = 3,
            Title = "Team 3",
            EventId = 1,
            CreateDate = new DateTime(2020, 1, 3),
            UpdateDate = new DateTime(2020, 1, 3),
            CreateUserId = 3,
            UpdateUserId = 3,
            StatusId = 1
        }
    };

    private HubConnection? hubConnection;
    private EventModel message = new EventModel { };
    private List<User> teamList;
    private string? userInput;
    private int? userId;
    private string? messageInput;
    private bool loaded = false;

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await EventController.ConfigureHub();
        await EventController.StartConnection();
        EventController.Get(id);
        message = EventController.message;
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private async Task Create()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Create");
        }
    }

    private void Edit()
    {
        UriHelper.NavigateTo("/events/" + id + "/Edit");
    }

    private async Task Delete()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ForceDeleteOne", id);
            UriHelper.NavigateTo("/events/");
        }
    }

    private async Task EditEvent()
    {
        UriHelper.NavigateTo("/events/" + id + "/edit");
    }

    private async Task DeleteEvent()
    {

    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
