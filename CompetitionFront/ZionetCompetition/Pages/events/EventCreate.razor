@page "/Events/create"

@using Microsoft.AspNetCore.SignalR.Client
@using Blazorise
@using ZionetCompetition.Enums;
@using ZionetCompetition.Models

@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject ZionetCompetition.Controllers.GenClientController<Event> EventController
@inject ZionetCompetition.Controllers.GenClientController<EventStatus> EventStatusController
@inject NavigationManager Navigation
@inject ZionetCompetition.Services.TokenService TokenService

@if (!loaded)
{
    <SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
    <EditForm Model="@newEvent" OnValidSubmit="@Save" OnInvalidSubmit=@InvalidFormSubmitted>
        <DataAnnotationsValidator />
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>Title: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputText @bind-Value="@newEvent.Title" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>Address: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputText @bind-Value="@newEvent.Address" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>Start Time: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputDate @bind-Value="@newEvent.StartTime" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16"> 
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>End Time: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputDate @bind-Value="@newEvent.EndTime" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16"> 
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>Number Participants In Team: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputNumber @bind-Value="@newEvent.NumberParticipantsInTeam" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>NumberConcurrentTasks: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputNumber @bind-Value="@newEvent.NumberConcurrentTasks" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>#CodeCompetition: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputText @bind-Value="@newEvent.Hashcode" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>Event status: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <RadioGroup TValue="int"
                        Name="eventStatuses"
                        CheckedValue="@checkedEventStatus"
                        CheckedValueChanged="@OnCheckedValueChanged"
                        Buttons>
                    @foreach (EventStatus status in eventStatuses)
                    {
                        <Radio Value="@(status.Id)">@status.Title</Radio>
                    }
                </RadioGroup>
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>Enable event: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <Blazorise.Switch TValue="bool" @bind-Checked="@newEvent.IsEnable"></Blazorise.Switch>
            </Column>
        </Row>
        <Blazorise.Bootstrap.Button Color="Color.Primary" Type="Blazorise.ButtonType.Submit">Save</Blazorise.Bootstrap.Button>
    </EditForm>
}

@code {
    //[Parameter]
    //public int id { get; set; }


    //private HubConnection? hubConnection;
    //private Event EventFields = new Event();
    private Event newEvent = new Event();
    private IEnumerable<EventStatus> eventStatuses = new List<EventStatus> { };
    int checkedEventStatus;

    //private string? EventInput;
    // int? EventId;
    //private int userId = 1;
    //private string? messageInput;
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        await EventStatusController.ConfigureHub(TokenService.GetToken(HttpContextAccessor));
        await EventStatusController.StartConnection();
        await EventStatusController.GetAll();
        eventStatuses = EventStatusController.messages;

        await EventController.ConfigureHub(TokenService.GetToken(HttpContextAccessor));
        await EventController.StartConnection();
        //await EventController.Get(1);
        //newEvent = EventController.message;
        checkedEventStatus = (int)EnentStatusEnm.Preparation;
        newEvent.IsEnable = true;
        loaded = true;
        StateHasChanged();
    }

    //public bool IsConnected =>
    //    hubConnection?.State == HubConnectionState.Connected;

    private async void Save(EditContext editContext)
    {
        //newEvent.Title = "dsfds";
        //newEvent.Address = "dfds";
        //newEvent.StartTime = DateTime.Now;
        //newEvent.EndTime = DateTime.Now;
        //newEvent.NumberParticipantsInTeam = 5;
        //newEvent.NumberConcurrentTasks = 4;
        //newEvent.Hashcode = "#32";
        //newEvent.EventStatusId = (int)EnentStatusEnm.Preparation;
        //newEvent.IsEnable = true;

    //await EventController.Update((int)newEvent.Id, newEvent);
        await EventController.Create(newEvent);
    }

    Task OnCheckedValueChanged(int value)
    {
        checkedEventStatus = value;
        newEvent.EventStatusId = checkedEventStatus;
        return Task.CompletedTask;
    }

    private void InvalidFormSubmitted(){}

    public async ValueTask DisposeAsync()
    {
        await EventController.DisposeAsync();
    }
}
