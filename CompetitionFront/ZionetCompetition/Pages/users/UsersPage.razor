@page "/users"

@using System;
@using System.Globalization;
@using System.Reflection;
@using Microsoft.AspNetCore.SignalR.Client
@using ZionetCompetition.Models
@using BlazorBootstrap
@using Blazorise.DataGrid

@inject ZionetCompetition.Controllers.UserController UserController
@inject NavigationManager Navigation

@implements IAsyncDisposable



<PageTitle>Users</PageTitle>

<DataGrid TItem="User"
        Data="@messages"
        Filterable="true"
        FilterMethod="DataGridFilterMethod.Contains"
        ShowPager="true"
        ShowPageSizes="true"
        Editable="false"
        Striped="true"
        Hoverable="true"
        SelectionMode="DataGridSelectionMode.Single"
        Responsive="true"
        @bind-SelectedRow=selectedUser>
    <ChildContent>
        <DataGridCommandColumn TItem="User"></DataGridCommandColumn>
        <DataGridColumn TItem="User" Field="Id" Caption="Id" Sortable="false" Displayable="true">
            <DisplayTemplate>
                <NavLink href="@($"/Users/{context.Id}")">@context.Id</NavLink>
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="User" Field="FirstName" Caption="FirstName" Sortable="false" Displayable="true" />
        <DataGridDateColumn TItem="User" Field="LastName" Caption="LastName" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="User" Field="Email" Caption="Email" Sortable="false" Displayable="true" />
        <DataGridColumn TItem="User" Field="Github" Caption="Github" Sortable="true" Displayable="true" />
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            No records were found.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <progress class="progress is-small is-primary" max="100" />
        </div>
    </LoadingTemplate>
</DataGrid>


@code {
    private HubConnection? hubConnection;
    private User selectedUser;
    private IEnumerable<User> messages = new List<User> { };
    protected override async Task OnInitializedAsync()
    {
        await UserController.ConfigureHub();
        await UserController.StartConnection();
        await UserController.GetAll();
        messages = UserController.messages;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}