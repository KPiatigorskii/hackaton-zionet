@page "/users/{id:int}"
@inject ZionetCompetition.Controllers.UserController UserController
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.SignalR.Client
@using ZionetCompetition.Models


@if(!loaded)
{
    <SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
    <h3>User Details</h3>

    <div><span>FirstName:</span><span>@message.FirstName</span></div>
    <div><span>LastName:</span><span>@message.LastName</span></div>
    <div><span>Email:</span><span>@message.Email</span></div>
    <div><span>Github:</span><span>@message.Github</span></div>
    <div><span>RoleId:</span><span>@message.RoleId</span></div>


<div style="margin-top: 20px">

    <Button Color="Color.Primary" @onclick="Edit" >Edit</Button>
    <Button Color="Color.Primary" @onclick="Delete" >Delete</Button>
</div>
}


@code {
    [Parameter]
    public int id { get; set; }


    private HubConnection? hubConnection;
    private User message = new User { };
    private string? userInput;
    private int? userId;
    private string? messageInput;
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        await UserController.ConfigureHub();
        await UserController.StartConnection();
        await UserController.Get(id);

        message = UserController.message;
        loaded = true;
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private async Task Create()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Create");
        }
    }

    private void Edit()
    {
        UriHelper.NavigateTo("/Users/" + id + "/Edit");
    }

    private async Task Delete()
    {
        UserController.Delete(id);
        UriHelper.NavigateTo("/Users/");
    }

}
