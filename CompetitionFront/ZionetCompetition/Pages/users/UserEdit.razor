@page "/Users/{id:int}/edit"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorBootstrap
@using Blazorise
@using ZionetCompetition.Models

@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject ZionetCompetition.Controllers.UserController UserController
@inject NavigationManager Navigation
@inject ZionetCompetition.Services.TokenService TokenService
@inject ZionetCompetition.Controllers.UserController UserController
@inject NavigationManager UriHelper

@if (!loaded)
{
    <SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
    <EditForm Model="@message" OnValidSubmit="@Save" OnInvalidSubmit=@InvalidFormSubmitted>
        <DataAnnotationsValidator />
        <div>
            <label>FirstName
                <InputText @bind-Value="@message.FirstName" />
            </label>
        </div>
        <div>
            <label>
                LastName
                <InputText @bind-Value="@message.LastName" />
            </label>
        </div>
        <div>
            <label>
                Email
                <InputText @bind-Value="@message.Email" />
            </label>
        </div>
         <div>
            <label>
                Github
                <InputText @bind-Value="@message.Github" />
            </label>
        </div>
        <div>
            <label>
                RoleId
                <InputNumber @bind-Value="@message.RoleId" />
            </label>
        </div>

        <Blazorise.Bootstrap.Button Color="Color.Primary" Type="Blazorise.ButtonType.Submit">Save</Blazorise.Bootstrap.Button>
    </EditForm>

}

@code {
    [Parameter]
    public int id { get; set; }


    private HubConnection? hubConnection;
    private User UserFields;
    private User message, user;
    private string? userInput;
    private int? userId;
    private string? messageInput;
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        await UserController.ConfigureHub(TokenService.GetToken(HttpContextAccessor));
        await UserController.StartConnection();

        await UserController.Get(id);
        message = UserController.message;
        loaded = true;
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private async Task Save(EditContext editContext)
    {
        UserController.Update(id, message);
        UriHelper.NavigateTo("/Users/" + id);
    }

    private void InvalidFormSubmitted(){}


}
