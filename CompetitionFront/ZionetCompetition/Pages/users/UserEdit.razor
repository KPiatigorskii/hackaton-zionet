@page "/Users/{id:int}/edit"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorBootstrap
@using Blazorise
@using ZionetCompetition.Models

@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@inject ZionetCompetition.Services.TokenService TokenService
@inject ZionetCompetition.Controllers.GenClientController<Role> RoleController
@inject ZionetCompetition.Controllers.GenClientController<User> UserController
@inject NavigationManager UriHelper

@implements IAsyncDisposable

@if (!loaded)
{
    <SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
    <EditForm Model="@message" OnValidSubmit="@Save" OnInvalidSubmit=@InvalidFormSubmitted>
        <DataAnnotationsValidator />
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>FirstName: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputText @bind-Value="@message.FirstName" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>LastName: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputText @bind-Value="@message.LastName" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>Email: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputText @bind-Value="@message.Email" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16"> 
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>Github: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <InputText @bind-Value="@message.Github" />
            </Column>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16">
            <Column ColumnSize="ColumnSize.Is2" Class="col-md-2 col-sm-4">
                <b>Role: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="col-md-10 col-sm-8">
                <RadioGroup TValue="int"
                        Name="roles"
                        CheckedValue="@checkedRole"
                        CheckedValueChanged="@OnCheckedValueChanged"
                        Buttons>
                    @foreach (Role role in Roles)
                    {
                        <Radio Value="@(role.Id)">@role.Title</Radio>
                    }
                </RadioGroup>
            </Column>
        </Row>
        <Blazorise.Bootstrap.Button Color="Color.Primary" Type="Blazorise.ButtonType.Submit">Save</Blazorise.Bootstrap.Button>
    </EditForm>

}


@code {
    [Parameter]
    public int id { get; set; }


    //private HubConnection? hubConnection;
    private User UserFields;
    private User message;
    private string? userInput;
    private int? userId;
    private string? messageInput;
    private IEnumerable<Role> Roles = new List<Role> { };
    private int checkedRole;
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        var token =await TokenService.GetToken();
        await RoleController.ConfigureHub(token);
        await RoleController.StartConnection();
        await RoleController.GetAll();
        Roles = RoleController.messages;

        await UserController.ConfigureHub(token);
        await UserController.StartConnection();
        await UserController.Get(id);
        message = UserController.message;
        checkedRole = message.RoleId;

        loaded = true;
        StateHasChanged();
    }

    private async Task Save(EditContext editContext)
    {
        UserController.Update(id, message);
        UriHelper.NavigateTo("/Users/" + id);
    }



    Task OnCheckedValueChanged(int value)
    {
        checkedRole = value;
        message.RoleId = checkedRole;
        return Task.CompletedTask;
    }

    private void InvalidFormSubmitted(){}

    public async ValueTask DisposeAsync()
    {
        await RoleController.DisposeAsync();
        await UserController.DisposeAsync();
    }
}
