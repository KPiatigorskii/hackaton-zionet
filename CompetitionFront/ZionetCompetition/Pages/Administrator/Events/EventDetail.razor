@page "/events/{id:int}"

@using System;
@using System.Globalization;
@using System.Reflection;
@using Microsoft.AspNetCore.SignalR.Client
@using ZionetCompetition.Models
@using Blazorise.DataGrid

@using ZionetCompetition.Data
@using Blazorise
@using System.Linq
@using ZionetCompetition.Pages.Administrator.Events
@using ZionetCompetition.Pages.Administrator.Managers
@using ZionetCompetition.Pages.Administrator.Participants
@using ZionetCompetition.Pages.Administrator.Tasks
@using ZionetCompetition.Pages.Administrator.Teams

@inject ZionetCompetition.Controllers.GenClientController<Event> EventController
@inject ZionetCompetition.Controllers.GenClientController<EventParticipantTeam> UserEventTeamController
@inject ZionetCompetition.Controllers.GenClientController<Team> TeamController
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@inject ZionetCompetition.Services.TokenService TokenService
@inject ZionetCompetition.Services.TwitterEngineService TwitterEngineService

@implements IAsyncDisposable

@if (!loaded)
{
    <SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
    <div>
        <h3>Event @selectedEvent.Title</h3>
    <Button Color="Color.Primary" Clicked="@StartEvent">Start Event</Button>
    <Button Color="Color.Primary" Clicked="@StopEvent">Stop Event</Button>
    @*@counter*@

</div>
    <Tabs SelectedTab="@selectedTab" RenderMode="TabsRenderMode.LazyReload" SelectedTabChanged="@OnSelectedTabChanged">
        
        <Items>
            <Tab Name="Info">Event Info</Tab>
            <Tab Name="Teams">Teams</Tab>
            <Tab Name="Participants">Participants</Tab>
            <Tab Name="Tasks">Tasks</Tab>
            <Tab Name="Managers">Managers</Tab>
        </Items>
        <Content>
            <TabPanel Name="Info">
                <EventInfo id="@id" />
            </TabPanel>

            <TabPanel Name="Teams">
                <TeamsPage eventId="@id" />
            </TabPanel>

            <TabPanel Name="Participants">
                <ParticipantsPage eventId="@id" />
            </TabPanel> 
            
            <TabPanel Name="Tasks">
                <EventTasksPage eventId="@id" />
            </TabPanel>

            <TabPanel Name="Managers">
                <EventManagersPage eventId="@id" />
            </TabPanel>

            <TabPanel Name="Managers1">
                @*<DataGrid TItem="User"
                          Data="@teamUsers"
                          Filterable="true"
                          FilterMethod="DataGridFilterMethod.Contains"
                          ShowPager="true"
                          ShowPageSizes="true"
                          EditMode="DataGridEditMode.Popup"
                          CommandMode="DataGridCommandMode.ButtonRow"
                          Editable="false"
                          Striped="true"
                          Hoverable="true"
                          SelectionMode="DataGridSelectionMode.Single"
                          Responsive="true"
                          @bind-SelectedRow=selectedUser>
                    <DataGridColumns>
                        <DataGridCommandColumn TItem="TaskModel" NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false">
                            <SaveCommandTemplate>
                                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Success" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </SaveCommandTemplate>
                            <CancelCommandTemplate>
                                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </CancelCommandTemplate>
                        </DataGridCommandColumn>
                        <DataGridColumn TItem="User" Field="Id" Caption="Id" Sortable="false" Displayable="true">
                            <DisplayTemplate>
                                <NavLink href="@($"/Users/{context.Id}")">@context.Id</NavLink>
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridColumn Caption="Name" Sortable="false" Displayable="true" Editable>
                            <DisplayTemplate>
                                @{
                                    var fullName = (context as User)?.FirstName.ToString() + " " + (context as User)?.LastName.ToString();

                                    if (fullName != " ")
                                    {
                                        @($"{fullName}")
                                    }
                                }
                            </DisplayTemplate>
                            <EditTemplate>
                                <Select TValue="string">
                                    @foreach(var user in teamUsers)
                                    {
                                        if (user.RoleId == 2) // TODO fix the hardcode
                                        {
                                            <SelectItem Value="@user.Id">@user.FirstName @user.LastName</SelectItem>
                                        }
                                    }
                                </Select>
                            </EditTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="User" Field="Email" Caption="Email" Sortable="false" Displayable="true" />
                        <DataGridColumn TItem="User" Field="Github" Caption="Github" Sortable="true" Displayable="true" />
                    </DataGridColumns>

                    <EmptyTemplate>
                        <div class="box">
                            No records were found.
                        </div>
                    </EmptyTemplate>
                    <LoadingTemplate>
                        <div class="box">
                            <progress class="progress is-small is-primary" max="100" />
                        </div>
                    </LoadingTemplate>
                    <ButtonRowTemplate>
                        <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
                        <Button Color="Color.Danger" Disabled="(selectedTask is null)" Clicked="context.DeleteCommand.Clicked">Delete</Button>
                    </ButtonRowTemplate>

                </DataGrid>*@
            </TabPanel>
            
        </Content>
    </Tabs>
}


@code {

    [Parameter]
    public int id { get; set; }
    string selectedTab = "Info";
    private bool loaded = false;

    //private List<User> teamList;
    //private string? userInput;
    //private int? userId;
    //private string? messageInput;
    

    private Event selectedEvent = new Event { };

    //private List<EventParticipantTeam> allEventParticipantTeams = new List<EventParticipantTeam> { };
    //private List<EventParticipantTeam> eventParticipantTeams = new List<EventParticipantTeam> { };
    //private List<Team> allTeams = new List<Team> { };
    //private List<Team> eventTeams = new List<Team> { };

    protected override async Task OnInitializedAsync()
    {
        //var filtersUET = new Dictionary<string, object>() { { "EventId", id } };
        //var filtersE = new Dictionary<string, object>() { { "Id", id } };

        var token =await TokenService.GetToken();

        await EventController.ConfigureHub(token);
        await EventController.StartConnection();
        await EventController.Get(id);
        //await EventController.GetOneWithConditions(filtersE);
        selectedEvent = EventController.message;

        //await UserEventTeamController.ConfigureHub(token);
        //await UserEventTeamController.StartConnection();
        ////await UserEventTeamController.GetAll();
        //await UserEventTeamController.GetAllWithConditions(filtersUET);
        //eventParticipantTeams = UserEventTeamController.messages.ToList();
        //allEventParticipantTeams = UserEventTeamController.messages.ToList();
        //eventParticipantTeams = allEventParticipantTeams.Where(t => t.EventId == id).ToList();

        //await TeamController.ConfigureHub(token);
        //await TeamController.StartConnection();
        //await TeamController.GetAll();
        //allTeams = TeamController.messages.ToList();
        //eventTeams = allTeams.Where(t => t.EventId == id).ToList();

        loaded = true;
        //Counter();
        StateHasChanged();
    }

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;
        return Task.CompletedTask;
    }

    private async Task StartEvent()
    {
        TwitterEngineService.SendTweet($"Competition {selectedEvent.Title} starting! All bets are off");
    }

    private async Task StopEvent()
    {
        TwitterEngineService.SendTweet($"Competition {selectedEvent.Title} was stopped");
    }

    private void EditEvent()
    {
        Navigation.NavigateTo("/Events/" + id + "/edit");
    }

    //private async Task Create()
    //{
    //    if (hubConnection is not null)
    //    {
    //        await hubConnection.SendAsync("Create");
    //    }
    //}

    //private async Task Delete()
    //{
    //    if (hubConnection is not null)
    //    {
    //        await hubConnection.SendAsync("ForceDeleteOne", id);
    //        Navigation.NavigateTo("/events/");
    //    }
    //}

    //private async Task DeleteEvent()
    //{

    //}


    public async ValueTask DisposeAsync()
    {
        await UserEventTeamController.DisposeAsync();
        await EventController.DisposeAsync();
        
    }

    private int counter = 0;
    private async Task Counter()
    {
        while (true)
        {
            await Task.Delay(100);
            counter++;
            StateHasChanged();
        }
    }
}
