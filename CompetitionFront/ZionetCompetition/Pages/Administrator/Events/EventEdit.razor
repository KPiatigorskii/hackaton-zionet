@page "/Events/{id:int}/edit"

@using Microsoft.AspNetCore.SignalR.Client
@using Blazorise
@using ZionetCompetition.Enums;
@using ZionetCompetition.Models

@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject ZionetCompetition.Controllers.GenClientController<Event> EventController
@inject ZionetCompetition.Controllers.GenClientController<EventStatus> EventStatusController
@inject NavigationManager Navigation
@inject ZionetCompetition.Services.TokenService TokenService

@implements IAsyncDisposable

@if (!loaded)
{
    <SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
    <EditForm Model="@changeEvent" OnValidSubmit="@Save" OnInvalidSubmit=@InvalidFormSubmitted class="form-bottom-border">
        <DataAnnotationsValidator />
        <Row >
            <Column ColumnSize="ColumnSize.Is2" Class="bottom-border col-md-4 col-sm-6">
                <b>Title: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="bottom-border col-md-4 col-sm-6">
                <InputText @bind-Value="@changeEvent.Title" />
            </Column>
        </Row>
        <Row >
            <Column ColumnSize="ColumnSize.Is2" Class="bottom-border col-md-4 col-sm-6">
                <b>Address: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="bottom-border col-md-4 col-sm-6">
                <InputText @bind-Value="@changeEvent.Address" />
            </Column>
        </Row>
        <Row >
            <Column ColumnSize="ColumnSize.Is2" Class="bottom-border col-md-4 col-sm-6">
                <b>Start Time: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="bottom-border col-md-4 col-sm-6">
                <InputDate @bind-Value="@changeEvent.StartTime" />
            </Column>
        </Row>
        <Row >
            <Column ColumnSize="ColumnSize.Is2" Class="bottom-border col-md-4 col-sm-6">
                <b>End Time: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="bottom-border col-md-4 col-sm-6">
                <InputDate @bind-Value="@changeEvent.EndTime" />
            </Column>
        </Row>
        <Row >
            <Column ColumnSize="ColumnSize.Is2" Class="bottom-border col-md-4 col-sm-6">
                <b>Number Participants In Team: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="bottom-border col-md-4 col-sm-6">
                <InputNumber @bind-Value="@changeEvent.NumberParticipantsInTeam" />
            </Column>
        </Row>
        <Row >
            <Column ColumnSize="ColumnSize.Is2" Class="bottom-border col-md-4 col-sm-6">
                <b>Number Concurrent Tasks: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="bottom-border col-md-4 col-sm-6">
                <InputNumber @bind-Value="@changeEvent.NumberConcurrentTasks" />
            </Column>
        </Row>
        <Row >
            <Column ColumnSize="ColumnSize.Is2" Class="bottom-border col-md-4 col-sm-6">
                <b>#CodeCompetition: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="bottom-border col-md-4 col-sm-6">
                <InputText @bind-Value="@changeEvent.Hashcode" />
            </Column>
        </Row>
        <Row >
            <Column ColumnSize="ColumnSize.Is2" Class="bottom-border col-md-4 col-sm-6">
                <b>Event status: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="bottom-border col-md-4 col-sm-6">
                <RadioGroup TValue="int"
                        Name="eventStatuses"
                        CheckedValue="@checkedEventStatus"
                        CheckedValueChanged="@OnCheckedValueChanged"
                        Buttons>
                    @foreach (EventStatus status in eventStatuses)
                    {
                        <Radio Value="@(status.Id)">@status.Title</Radio>
                    }
                </RadioGroup>
            </Column>
        </Row>
        <Row >
            <Column ColumnSize="ColumnSize.Is2" Class="bottom-border col-md-4 col-sm-6">
                <b>Enable event: </b>
            </Column>
            <Column ColumnSize="ColumnSize.Is10" Class="bottom-border col-md-4 col-sm-6">
                <Blazorise.Switch TValue="bool" @bind-Checked="@changeEvent.IsEnable"></Blazorise.Switch>
            </Column>
        </Row>
        <Blazorise.Bootstrap.Button Color="Color.Primary" Type="Blazorise.ButtonType.Submit">Save</Blazorise.Bootstrap.Button>
    </EditForm>
}


@code {
    [Parameter]
    public int id { get; set; }

    private Event changeEvent = new Event();
    private IEnumerable<EventStatus> eventStatuses = new List<EventStatus> { };
    int checkedEventStatus;
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        var token =await TokenService.GetToken();
        await EventStatusController.ConfigureHub(token);
        await EventStatusController.StartConnection();
        await EventStatusController.GetAll();
        eventStatuses = EventStatusController.messages;

        await EventController.ConfigureHub(token);
        await EventController.StartConnection();
        await EventController.Get(id);
        changeEvent = EventController.message;
        checkedEventStatus = changeEvent.EventStatusId;
        loaded = true;
        StateHasChanged();
    }

    private async void Save(EditContext editContext)
    {
        await EventController.Update(id, changeEvent);
    }

    Task OnCheckedValueChanged(int value)
    {
        checkedEventStatus = value;
        changeEvent.EventStatusId = checkedEventStatus;
        return Task.CompletedTask;
    }

    private void InvalidFormSubmitted(){}

    public async ValueTask DisposeAsync()
    {
        await EventStatusController.DisposeAsync();
        await EventController.DisposeAsync();
    }
}
