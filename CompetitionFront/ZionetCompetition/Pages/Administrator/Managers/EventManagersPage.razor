@*@using System;
@using System.Globalization;
@using System.Reflection;
@using Microsoft.AspNetCore.SignalR.Client
@using ZionetCompetition.Models
@using Blazorise.DataGrid

@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject ZionetCompetition.Controllers.GenClientController<User> UserController
@inject ZionetCompetition.Controllers.GenClientController<EventManager> EventManagerController
@inject NavigationManager Navigation
@inject ZionetCompetition.Services.TokenService TokenService


@implements IAsyncDisposable

@if (!loaded)
{
	<SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
	<DataGrid TItem="EventTask"
		  Data="@eventTasks"
		  @bind-SelectedRow=selectedTask
		  RowRemoved="@Delete"
		  Filterable="true"
		  FilterMethod="DataGridFilterMethod.Contains"
		  Striped="true"
		  Editable="false"
		  Hoverable="true"
		  Responsive="true"
		  ShowPager="true"
		  ShowPageSizes="true"
		  SelectionMode="DataGridSelectionMode.Single" 
		  CommandMode="DataGridCommandMode.ButtonRow">
		<ChildContent>
			<DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false">
				<SaveCommandTemplate>
					<Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
				</SaveCommandTemplate>
				<CancelCommandTemplate>
					<Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
				</CancelCommandTemplate>
			</DataGridCommandColumn>
			<DataGridColumn TItem="EventTask" Field="Task.Id" Caption="Id" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Title" Caption="Title" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Category.Title" Caption="Category" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Language" Caption="Language" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Platform" Caption="Platform" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Duration" Caption="Duration" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.Points" Caption="Points" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.HasBonus" Caption="HasBonus" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.BonusExtraTime" Caption="BonusExtraTime" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="EventTask" Field="Task.BonusPoints" Caption="BonusPoints" Sortable="false" Displayable="true" Editable />
		</ChildContent>

		<EmptyTemplate>
			<div class="box">
				No records were found.
			</div>
		</EmptyTemplate>

		<LoadingTemplate>
			<div class="box">
				<progress class="progress is-small is-primary" max="100" />
			</div>
		</LoadingTemplate>

		<ButtonRowTemplate>
			<Button Color="Color.Success" Clicked="@ShowModal">Add</Button>
			<Button Color="Color.Danger" Disabled="(selectedTask is null)" Clicked="context.DeleteCommand.Clicked">Delete</Button>
		</ButtonRowTemplate>
	</DataGrid>

	<Modal @ref="modalRef">
		<ModalContent Size="ModalSize.ExtraLarge">
			<ModalHeader>
				<ModalTitle>Tasks pool</ModalTitle>
				<CloseButton />
			</ModalHeader>
			<ModalBody>
				<DataGrid TItem="TaskModel"
					  Data="@allTasks"
					  SelectionMode="DataGridSelectionMode.Multiple"
					  @bind-SelectedRow=selectedTaskInPool
					  @bind-SelectedRows="selectedTasksInPool"
					  Filterable="true"
					  FilterMethod="DataGridFilterMethod.Contains"
					  Striped="true"
					  Editable="false"
					  Hoverable="true"
					  Responsive="true"
					  ShowPager="true"
					  ShowPageSizes="true"
					  RowSelectable="RowSelectableHandler" >
					<DataGridMultiSelectColumn TItem="TaskModel" Width="30px"></DataGridMultiSelectColumn>
					<DataGridCommandColumn TItem="TaskModel" />
					
						<DataGridColumn TItem="TaskModel" Field="Id" Caption="Id" Sortable="true" Displayable="true" Editable />
						<DataGridColumn TItem="TaskModel" Field="Title" Caption="Title" Sortable="true" Displayable="true" Editable />
						<DataGridColumn TItem="TaskModel" Field="Category.Title" Caption="Category" Sortable="true" Displayable="true" Editable />
						<DataGridColumn TItem="TaskModel" Field="Language" Caption="Language" Sortable="true" Displayable="true" Editable />
						<DataGridColumn TItem="TaskModel" Field="Platform" Caption="Platform" Sortable="true" Displayable="true" Editable />
						<DataGridColumn TItem="TaskModel" Field="Duration" Caption="Duration" Sortable="true" Displayable="true" Editable />
						<DataGridColumn TItem="TaskModel" Field="Points" Caption="Points" Sortable="true" Displayable="true" Editable />
						<DataGridColumn TItem="TaskModel" Field="HasBonus" Caption="HasBonus" Sortable="true" Displayable="true" Editable />
						<DataGridColumn TItem="TaskModel" Field="BonusExtraTime" Caption="BonusExtraTime" Sortable="true" Displayable="true" Editable />
						<DataGridColumn TItem="TaskModel" Field="BonusPoints" Caption="BonusPoints" Sortable="true" Displayable="true" Editable />
					
				</DataGrid>
			</ModalBody>
			<ModalFooter>
				<Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
				<Button Color="Color.Primary" Disabled="(selectedTasksInPool is null)" Clicked="@AddTasksModal">Add</Button>
			</ModalFooter>
		</ModalContent>
	</Modal>
}

@code {
	[Parameter]
	public int eventId { get; set; }
	private Modal modalRef;
	private EventManager selectedManager;

	private User selectedManagerInPool;
	private List<User> selectedManagersInPool;

	private List<User> allUsers = new List<User> { };
	private List<User> allManagers = new List<User> { };

	private List<EventManager> allEventManagers = new List<EventManager> { };
	private List<EventManager> eventManagers = new List<EventManager> { };
	private bool loaded = false;

	protected override async Task OnInitializedAsync()
	{
		var token = await TokenService.GetToken();

		await UserController.ConfigureHub(token);
		await UserController.StartConnection();
		await UserController.GetAll();
		allUsers = UserController.messages.ToList();
		allManagers = allUsers.Where(u => u.Role.Title == Entities.Roles["Manager"]).ToList();

		await EventManagerController.ConfigureHub(token);
		await EventManagerController.StartConnection();
		await EventManagerController.GetAll();
		allEventManagers = EventManagerController.messages.ToList();
		eventManagers = allEventManagers.Where(t => t.EventId == eventId).ToList();

		loaded = true;
		StateHasChanged();
		await base.OnInitializedAsync();
	}

	private Task ShowModal()
	{
		sortTask();
		return modalRef.Show();
	}

	private Task HideModal()
	{
		return modalRef.Hide();
	}

	private async Task AddTasksModal()
	{
		foreach (User poolItem in selectedManagersInPool)
		{
			EventManager newItem = new EventManager() { };
			newItem.EventId = eventId;
			newItem.UserId = poolItem.Id;
			await EventManagerController.Create(newItem);
		}
		await EventManagerController.GetAll();
		allEventTasks = EventTaskController.messages.ToList();
		eventTasks = allEventTasks.Where(t => t.EventId == eventId).ToList();
		StateHasChanged();
		selectedTasksInPool = null;
		await modalRef.Hide(); // modalRef.Show();
		return;
	}

	private void sortTask()
	{
		allTasks = TaskController.messages.ToList();
		allTasks.RemoveAll(t => eventTasks.Select(e => e.TaskId).Contains(t.Id));
		StateHasChanged();
	}

	//private async void Create(SavedRowItem<EventTask, Dictionary<string, object>> rowInserted)
	//{
	//	var newTeam = rowInserted.Item;
	//	newTeam.EventId = eventId;
	//	await EventTaskController.Create(newTeam);
	//	StateHasChanged();
	//}

	private bool RowSelectableHandler(RowSelectableEventArgs<TaskModel> rowSelectableEventArgs)
	=> rowSelectableEventArgs.SelectReason is not DataGridSelectReason.RowClick;

	private async void Delete(EventTask rowRemoved)
	{
		await EventTaskController.Delete(rowRemoved.Id);
		StateHasChanged();
	}

	public async ValueTask DisposeAsync()
	{
		await TaskController.DisposeAsync(); 
		await EventTaskController.DisposeAsync();			
		await EventManagerController.DisposeAsync();
		await EventTaskEvaluateUserController.DisposeAsync();
	}
	
}	
*@