@page "/MyCurrentEvent/{eventId:int}"
@using System;
@using System.Globalization;
@using System.Reflection;
@using Microsoft.AspNetCore.SignalR.Client
@using ZionetCompetition.Models
@using Blazorise.DataGrid

@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject ZionetCompetition.Controllers.GenClientController<Event> EventController
@inject ZionetCompetition.Controllers.GenClientController<TeamTask> TeamTaskController
@inject NavigationManager Navigation
@inject ZionetCompetition.Services.TokenService TokenService


@implements IAsyncDisposable

@if (!loaded)
{
	<SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
	<div style="inset-inline-start:auto"><h1>@curentEvent.Title </h1></div>

	<div style="inset-inline-end:auto"><h1> Status: @curentEvent.Status.Title</h1></div>

	<DataGrid TItem="TeamTask"
		  Data="@curentTeamTasks"
		  @bind-SelectedRow=selectedTeamTask
		  RowUpdated="@Update"
		  Filterable="true"
		  FilterMethod="DataGridFilterMethod.Contains"
		  Striped="true"
		  Editable="false"
		  Hoverable="true"
		  Responsive="true"
		  ShowPager="true"
		  ShowPageSizes="true"
		  SelectionMode="DataGridSelectionMode.Single" 
		  CommandMode="DataGridCommandMode.ButtonRow">
		<ChildContent>
			<DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false">
				<SaveCommandTemplate>
					<Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
				</SaveCommandTemplate>
				<CancelCommandTemplate>
					<Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
				</CancelCommandTemplate>
			</DataGridCommandColumn>
			<DataGridColumn TItem="TeamTask" Field="Task.Id" Caption="Id" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="TeamTask" Field="Task.Title" Caption="Title" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="TeamTask" Field="Task.Category.Title" Caption="Category" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="TeamTask" Field="Task.Language" Caption="Language" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="TeamTask" Field="Task.Platform" Caption="Platform" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="TeamTask" Field="Task.Duration" Caption="Duration" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="TeamTask" Field="Task.Points" Caption="Max points" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="TeamTask" Field="Task.HasBonus" Caption="Bonus" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="TeamTask" Field="Team.Title" Caption="Team" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="TeamTask" Field="TaskStatusNavigation.Title" Caption="Status" Sortable="false" Displayable="true" Editable />
		</ChildContent>

		<EmptyTemplate>
			<div class="box">
				No records were found.
			</div>
		</EmptyTemplate>

		<LoadingTemplate>
			<div class="box">
				<progress class="progress is-small is-primary" max="100" />
			</div>
		</LoadingTemplate>

		<ButtonRowTemplate>
			<Button Color="Color.Primary" Disabled="(selectedTeamTask is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
			<Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Clear Filter</Button>
		</ButtonRowTemplate>
	</DataGrid>
}

@code {
	[Parameter]
	public int eventId { get; set; }

	private Event curentEvent;
	private TeamTask selectedTeamTask;
	private List<TeamTask> allTeamTask = new List<TeamTask> { };
	private List<TeamTask> eventTeamTasks = new List<TeamTask> { };
	private List<TeamTask> curentTeamTasks = new List<TeamTask> { };
	private bool loaded = false;

	protected override async Task OnInitializedAsync()
	{
		var token = await TokenService.GetToken();

		await EventController.ConfigureHub(token);
		await EventController.StartConnection();
		await EventController.Get(eventId);
		curentEvent = EventController.message;

		await TeamTaskController.ConfigureHub(token);
		await TeamTaskController.StartConnection();
		await TeamTaskController.GetAll();
		allTeamTask = TeamTaskController.messages.ToList();
		eventTeamTasks = allTeamTask.Where(t => t.Team.EventId == eventId).ToList();
		updateCurentTeamTasks();
		Counter();
        loaded = true;
		StateHasChanged();
		await base.OnInitializedAsync();
	}

	private async Task updateCurentTeamTasks()
	{
		var activTaskStatuses = Entities.activTaskStatuses;

		await TeamTaskController.GetAll();
		allTeamTask = TeamTaskController.messages.ToList();
		eventTeamTasks = allTeamTask.Where(t => t.Team.EventId == eventId).ToList();
		curentTeamTasks = eventTeamTasks.Where(t => activTaskStatuses.Values.Contains(t.TaskStatusNavigation.Title)).ToList();
	}

	private async void Update(SavedRowItem<TeamTask, Dictionary<string, object>> rowUpdated)
	{
		var chengedItem = rowUpdated.Item;
		await TeamTaskController.Update(chengedItem.Id, chengedItem);
		StateHasChanged();
	}

	public async ValueTask DisposeAsync()
	{
		await EventController.DisposeAsync(); 
		await TeamTaskController.DisposeAsync();
	}
	
	private async Task Counter()
	{
		while (true)
		{
			await Task.Delay(2000);
			updateCurentTeamTasks();
			StateHasChanged();
		}
	}
}	
