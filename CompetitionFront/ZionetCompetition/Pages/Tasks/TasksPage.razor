@*@page "/events/{eventId:int}/teams"*@

@using System;
@using System.Globalization;
@using System.Reflection;
@using Microsoft.AspNetCore.SignalR.Client
@using ZionetCompetition.Models
@using Blazorise.DataGrid

@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject ZionetCompetition.Controllers.GenClientController<TaskModel> TaskController
@inject NavigationManager Navigation
@inject ZionetCompetition.Services.TokenService TokenService


@implements IAsyncDisposable

@if (!loaded)
{
	<SpinKit Type="SpinKitType.Plane" Color="SlateBlue" Centered />
}
else
{
	<DataGrid TItem="TaskModel"
		  Data="@allTasks"
		  @bind-SelectedRow=selectedTask
		  RowInserted="@Create"
		  RowUpdated="@Update"
		  RowRemoved="@Delete"
		  Filterable="true"
		  FilterMethod="DataGridFilterMethod.Contains"
		  Striped="true"
		  Editable="false"
		  Hoverable="true"
		  Responsive="true"
		  ShowPager="true"
		  ShowPageSizes="true"
		  SelectionMode="DataGridSelectionMode.Single"
		  CommandMode="DataGridCommandMode.ButtonRow">
		<ChildContent>
			<DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false">
				<SaveCommandTemplate>
					<Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
				</SaveCommandTemplate>
				<CancelCommandTemplate>
					<Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
				</CancelCommandTemplate>
			</DataGridCommandColumn>
			<DataGridColumn TItem="Task" Field="Id" Caption="Id" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="Task" Field="Title" Caption="Title" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="Task" Field="TaskCategory.Title" Caption="Category" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="Task" Field="Language" Caption="Language" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="Task" Field="Platform" Caption="Platform" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="Task" Field="Duration" Caption="Duration" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="Task" Field="Points" Caption="Points" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="Task" Field="HasBonus" Caption="HasBonus" Sortable="false" Displayable="true" Editable />
			<DataGridColumn TItem="Task" Field="BonusExtraTime" Caption="BonusExtraTime" Sortable="true" Displayable="true" Editable />
			<DataGridColumn TItem="Task" Field="BonusPoints" Caption="BonusPoints" Sortable="false" Displayable="true" Editable />
		</ChildContent>

		<EmptyTemplate>
			<div class="box">
				No records were found.
			</div>
		</EmptyTemplate>

		<LoadingTemplate>
			<div class="box">
				<progress class="progress is-small is-primary" max="100" />
			</div>
		</LoadingTemplate>

		<ButtonRowTemplate>
			<Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
			<Button Color="Color.Primary" Disabled="(selectedTask is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
			<Button Color="Color.Danger" Disabled="(selectedTask is null)" Clicked="context.DeleteCommand.Clicked">Delete</Button>
			<Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Clear Filter</Button>
		</ButtonRowTemplate>
	</DataGrid>
}

@code {

	[Parameter]
	public int eventId { get; set; }
	private TaskModel selectedTask;
	private List<TaskModel> allTasks = new List<TaskModel> { };
	private bool loaded = false;


	protected override async Task OnInitializedAsync()
	{
		var token =await TokenService.GetToken();

		await TaskController.ConfigureHub(token);
		await TaskController.StartConnection();
		await TaskController.GetAll();
		allTasks = TaskController.messages.ToList();

		loaded = true;
		StateHasChanged();
		await base.OnInitializedAsync();
	}

	private async void Create(SavedRowItem<TaskModel, Dictionary<string, object>> rowInserted)
	{
		var newItem = rowInserted.Item;
		await TaskController.Create(newItem);
		StateHasChanged();
	}

	private async void Update(SavedRowItem<TaskModel, Dictionary<string, object>> rowUpdated)
	{
		var chengedItem = rowUpdated.Item;
		await TaskController.Update(chengedItem.Id, chengedItem);
		StateHasChanged();
	}

	private async void Delete(TaskModel rowRemoved)
	{
		await TaskController.Delete(rowRemoved.Id);
		StateHasChanged();
	}

	public async ValueTask DisposeAsync()
	{
		await TaskController.DisposeAsync();
	}
}
